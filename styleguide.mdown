# Style Guide (draft)

## CoffeeScript identation
Soft-tabs, 2 spaces (important, since CoffeeScript relies on significant whitespace).

For the love of all that's holy, **never mix tabs and soft-tabs in the same file!** I *will* call you mean names if you do (and so will CoffeeScript's compiler, no doubt)

## Naming conventions
Naming conventions follow standard Java conventions:

- Class names are written as UpperCamelCase nouns, e.g. `SomeFancyThing` and `XMLParser`
- Function names and variables are written as lowerCamelCase, e.g. `doSomethingFancy` and `parse`
- Constants (or pseudo-constants, since JavaScript doesn't have real constants), are written as `ALL_UPPERCASE_WITH_UNDERSCORES`
- Modules/namespaces are written as lowerCamelCase, e.g. `config` and `fileCaching`

Namespace functions and variables in objects instead of name-prefixes. I.e. use `page.dom.insert` instead of `pageDOMinsert`. Never use both namespacing and prefixing.

Be descriptive in naming things, but don't overdo it. `JSON.parse` is just as clear as `JSONParserModule.parseJSONFunction`.

Oh, and use English names for everything, please.

## General style
- DRY: Don't repeat yourself. If you find yourself about to copy/paste code, then stop coding, sober up/ride out your high, and realize you weren't thinking straight. Make a function instead. They're cheap and can be made with common household materials! (Learn to love closures)
- Comment your code (duh!)
- Keep your code's interface as clean as possible - don't expose helper functions and variables that are useless to the outside world (learn to love closures)
- Leave an empty line at the end of each file to make `diff` happy
- Never trust JavaScript type coercion, and...
- Throw a `TypeError` rather than doing type coercion, when types really matter

        # Bad, unless you truly intend to do type coercion
        someFunction = (arg) ->
          arg = String(arg)
        
        # Better
        someFunction = (arg) ->
          throw new TypeError unless typeof arg is "string"

- Avoid overly complex `unless` statements like `unless xyz isnt false and abc? then ...`
- Use curly brackets around object literals, if it improves readability
- Use CoffeeScript's `@` symbol - _except_ if it's by itself. Just looks weird

        # lol, wut?
        value = this.value
        scope = @
        
        # Better
        value = @value
        scope = this

- Use explicit returns, if it improves readability

        # Not good
        someFunction = (a, b) ->
          if a > b
            #
            # ... lots of code
            #
            # Implicit return in the middle of the function body. Easy to miss
            value1
          else
            #
            # ... lots of code
            #
            # Implicit return at the end
            value2
        
        # Better
        someFunction = (a, b) ->
          if a > b
            #
            # ... lots of code
            #
            # Explicit return; no confusion
            return value1
          else
            #
            # ... lots of code
            #
            # Also explicit for the sake of consistency
            return value2
          

- Return/throw early in a function, rather than wrapping long blocks in `if` clauses

        # Don't do this
        someFunction = (a, b) ->
          if a > b
            #
            # ... lots of code
            #
          else
            false
        
        # Better!
        someFunction = (a, b) ->
          return false unless a > b
          #
          # ... lots of code
          #

